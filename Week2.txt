운영체제커널
week 2 
1. Process란 무엇인가?
sol.) Process란 Disk(second stroage)에 저장된 데이터를 Memory로 load하여, CPU에서 연산 중 혹은 연산 예정인 데이터. 
	Code, Data, Heap, Stack 영역으로 나뉨(각 process 마다 이러한 memory structure를 가짐)
	
2. Process의 생명 주기는 어떻게 되는가?
sol.) - 생성(create) : 쉘에 명령어를 입력하거나, 응용 프로그램의 아이콘을 더블-클릭하여 프로그램을 실행 시키면 운영체제는 새로운 프로세스를 실행함. 

 - 제거(Destroy) :  프로세스를 강제로 제거 할 수 있는 인터페이스를 제공해야함. 보통 스스로 종료하지만 그렇지 않은 경우 필요없는 프로세스를 중단 시키는 API가 필요함.

 - 대기(Wait) : 때론 어떤 프로세스의 종료를 기다릴 필요가 있기에 대기 인터페이스가 제공됨.

 - 각종 제어(Miscellaneous Control) : 프로세스의 제거, 대기 이외에 여러가지 대기 인터페이스가 제공됨.

 - 상태(Status) : 프로세스 상태 정보를 얻어내는 인터페이스가 제공됨. 상태 정보에는 얼마 동안 실행되었는지 또는 프로세스가 어떤 상태에 있는지 등이 포함됨.

각 프로세스는 기본적으로 표준 입력(stdin) 표준 출력(stdout) 표준 에러(stderr) 장치에 해당하는 세 개의 파일 디스크립터(file descriptor)를 갖는다. 이 디스크립터를 사용하여 프로그램은 터미널로부터 입력을 읽고 화면에 출력을 프린트하는 작업을 쉽게함. 

3. Linux의 pcb의 구조는 어떻게 생겼는가?
	1	Hint: thread_struct
sol.) PCB란 프로세스의 관리를 위한 정보를 저장하는 자료구조(프로세스 상태를 파악하기 위한 준비 상태의 프로세스들을 위한 프로세스 리스트)
Linux의 PCB는 task_struct로, Sched.h에 선언 되어있음. (https://elixir.bootlin.com/linux/latest/source/include/linux/sched.h#L728) thread_info, mm, fs, files, signals등의 하위 구조체가 있다. PCB의 정보들을 분리해둔 이유는 새로운 thread생성 시 모든 정보를 복사하지 않고 thread_info만 복사 후, 나머지는 parent와 공유하여 오버헤드를 줄이기 위해서이다.

4. Process 의 자식을 다음과 같이 생성하고 싶다. 어떤 순서로 fork를 해야 할까?
sol.) forkex.c code 참고

5. 4번의 프로세스 생성상태에서 3, 5, 4, 2, 7, 8, 9, 6, 1 순으로 삭제 하려면 wait/waitpid를 어떻게 써야 할까?
sol.)

6. Pipe와 I/O Redirection을 그림과 함께 단계별로 설명하시오
sol.)


(우리가 다루지 않았지만 중요한 것: exec의 의미와 실행 순서)
